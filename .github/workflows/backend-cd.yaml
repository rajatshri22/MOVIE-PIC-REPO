name: Backend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
      # Check out the code from the repository.
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'
     # Set up a python environment using the specified  version.
      - name: Setup Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      
      # Set up a pip environment.
      - name: Install pipenv
        run: pip install pipenv
        working-directory: starter/backend
 
    # Run the pip test.
      - name: Run tests pip
        run: |
          pipenv install --dev
          pipenv run pytest
        working-directory: starter/backend

      # Install the dependencies.
      - name: Install dependencies
        run: pipenv install
        working-directory: starter/backend

      # Run the test.
      - name: Run test
        run: pipenv run test
        working-directory: starter/backend

      # Run lint.
      - name: Run lint
        run: pipenv run lint
        working-directory: starter/backend

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. You pushed to ${{github.repository}} at $(date)."

      # Test Job Setup.
  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'
     # Set up a python environment using the specified  version.
      - name: Setup Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      
      # Set up a pip environment.
      - name: Install pipenv
        run: pip install pipenv
        working-directory: starter/backend
 
    # Run the pip test.
      - name: Run tests pip
        run: |
          pipenv install --dev
          pipenv run pytest
        working-directory: starter/backend

      # Install the dependencies.
      - name: Install dependencies
        run: pipenv install
        working-directory: starter/backend

    
      # Run the test.
      - name: Run test
        run: pipenv run test
        working-directory: starter/backend

      # Run lint.
      - name: Run lint
        run: pipenv run lint
        working-directory: starter/backend

#Build Job
  build:
  #job should only run after the first 2 succeed
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    needs: [lint, test]
    steps:
      #  Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'

     
     # Set up a python environment using the specified  version.
      - name: Setup Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      
      # Set up a pip environment.
      - name: Install pipenv
        run: pip install pipenv
        working-directory: starter/backend
 
    # Run the pip test.
      - name: Run tests pip
        run: |
          pipenv install --dev
          pipenv run pytest
        working-directory: starter/backend

      # Install the dependencies.
      - name: Install dependencies
        run: pipenv install
        working-directory: starter/backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
     

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 585581564233.dkr.ecr.us-east-1.amazonaws.com

      - name: Set up ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        working-directory: starter/backend        

#Build Job
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
     # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      # Download kubectl binary
      - name: Download kubectl binaries
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          
      # Install kubectl
      - name: Install Kubectl
        run: |
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
      
      - name: Set up ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        working-directory: starter/backend        

      - name: Push to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: starter/backend


      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster --region us-east-1
        working-directory: starter/backend


      - name: Set image tag to newer version
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: cd k8s && kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: starter/backend


      - name: Deploy application to EKS cluster
        run: cd k8s && kustomize build | kubectl apply -f -
        working-directory: starter/backend


      - name: Cluster details
        run: |
          kubectl get pods -A
          kubectl get svc -A
          kubectl describe pods -A
        working-directory: starter/backend
          
