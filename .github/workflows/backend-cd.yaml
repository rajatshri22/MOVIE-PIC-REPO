name: Backend Continuous Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
      # Check out the code from the repository.
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'
     # Set up a python environment using the specified  version.
      - name: Setup Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      
      # Set up a pip environment.
      - name: Install pipenv
        run: pip install pipenv
        working-directory: starter/backend
 
    # Run the pip test.
      - name: Run tests pip
        run: |
          pipenv install --dev
          pipenv run pytest
        working-directory: starter/backend

      # Install the dependencies.
      - name: Install dependencies
        run: pipenv install
        working-directory: starter/backend

      # Run the test.
      - name: Run test
        run: pipenv run test
        working-directory: starter/backend

      # Run lint.
      - name: Run lint
        run: pipenv run lint
        working-directory: starter/backend

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. You pushed to ${{github.repository}} at $(date)."

      # Test Job Setup.
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'
     # Set up a python environment using the specified  version.
      - name: Setup Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      
      # Set up a pip environment.
      - name: Install pipenv
        run: pip install pipenv
        working-directory: starter/backend
 
    # Run the pip test.
      - name: Run tests pip
        run: |
          pipenv install --dev
          pipenv run pytest
        working-directory: starter/backend

      # Install the dependencies.
      - name: Install dependencies
        run: pipenv install
        working-directory: starter/backend

    
      # Run the test.
      - name: Run test
        run: pipenv run test
        working-directory: starter/backend

      # Run lint.
      - name: Run lint
        run: pipenv run lint
        working-directory: starter/backend

#Build Job
  build:
  #job should only run after the first 2 succeed
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    needs: [lint, test]
    steps:
      #  Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'

     
     # Set up a python environment using the specified  version.
      - name: Setup Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      
      # Set up a pip environment.
      - name: Install pipenv
        run: pip install pipenv
        working-directory: starter/backend
 
    # Run the pip test.
      - name: Run tests pip
        run: |
          pipenv install --dev
          pipenv run pytest
        working-directory: starter/backend

      # Install the dependencies.
      - name: Install dependencies
        run: pipenv install
        working-directory: starter/backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
     
      - name: Build and push Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          # Your Docker build and push commands here

      - name: Get Git SHA
        id: vars
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    # Build the Image
      - name: Build Docker image
        run: |
          docker build --tag mp-backend:latest .
        working-directory: starter/backend

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1  

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 585581564233.dkr.ecr.us-east-1.amazonaws.com

      - name: Tag Docker image
        run: |
          docker tag backend:latest 585581564233.dkr.ecr.us-east-1.amazonaws.com/backend:${{ env.GIT_SHA }}




      - name: Push Docker image to ECR
        run: |
          docker push ***.dkr.ecr.us-east-1.amazonaws.com/backend:${{ env.GIT_SHA }}

#Build Job
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
     # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'
     
     # Set up a python environment using the specified  version.
      - name: Setup Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      
      # Set up a pip environment.
      - name: Install pipenv
        run: pip install pipenv
        working-directory: starter/backend
 

      # Install the dependencies.
      - name: Install dependencies
        run: pipenv install
        working-directory: starter/backend

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1  


      # Run Deploy to Server command
      - name: Deploy to Server
        run: |
          echo "Deploying to server..."
          # Add your deployment commands 


    # Build the Image
      - name: Build Docker image
        run: |
          docker build --tag mp-backend:latest .
        working-directory: .github/workflows/backend/starter/backend

    # Run the Image
      - name: Run Docker Image
        run: |
          docker run -p 5000:5000 --name mp-backend -d my-backend
        working-directory: .github/workflows/backend/starter/backend

    # Check the running application
      - name: Check Running Application
        run: curl http://localhost:5000/movies
        working-directory: .github/workflows/backend/starter/backend

    # Review Logs
      - name: Review Logs
        run: |
          docker logs -f my-backend
        working-directory: .github/workflows/backend/starter/backend

    # Stop the application
      - name: Stop docker
        run: |
          docker stop
        working-directory: .github/workflows/backend/starter/backend

      #- name: Build application
      #  run: REACT_APP_MOVIE_API_URL=http://localhost:5000 npm start
      #  working-directory: .github/workflows/frontend
      
      #- name: Serve application
      #  run: |
      #    npx http-server ./frontend/ -p 8080 &  # Serve the index.html file
      #    sleep 5  # Wait for the server to start
