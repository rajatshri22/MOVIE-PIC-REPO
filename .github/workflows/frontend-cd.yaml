name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main  

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

  # Cache Dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'

    #Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: starter/frontend  

      # Run lint.
      - name: Run lint
        run: npx eslint
        working-directory: starter/frontend

  test:
    runs-on: ubuntu-latest
    steps:
    # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'

    #Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: starter/frontend  

      # Run lint.
      - name: Run lint
        run: npx eslint
        working-directory: starter/frontend

      - name: Run Unit Tests
        run: npm test
        working-directory: starter/frontend/src/components/__tests__

  build:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
    # Check out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Set up a Node.js environment using the specified node version.
      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '>=18'

    #Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: starter/frontend  

      - name: Fix permissions for react-scripts
        run: chmod +x node_modules/.bin/react-scripts
        working-directory: starter/frontend

      - name: Build Frontend Application
        run: npm run build
        working-directory: starter/frontend

      - name: Get Git SHA
        id: vars
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}

      - name: Set up ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

    # Build the Image
      - name: Build the docker image
        env:
          REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg REACT_APP_MOVIE_API_URL="http://${REACT_APP_MOVIE_API_URL}" \
            -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
            .
        working-directory: starter/frontend

    # Build the Image
     # - name: Build the Docker image
     #   run: |
     #     docker build -t frontend:latest .
     #   working-directory: starter/frontend



  deploy:
    name: Deploy Frontend to Kubernetes
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      # Download kubectl binary
      - name: Download kubectl binaries
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          
      # Install kubectl
      - name: Install Kubectl
        run: |
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Set up AWS credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV  


      - name: Set up ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build the docker image
        env:
          REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg REACT_APP_MOVIE_API_URL="http://${REACT_APP_MOVIE_API_URL}" \
            -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
            .

      - name: Push to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name my-cluster --region us-east-1

      - name: Set image tag to newer version
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: cd k8s && kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy application to EKS cluster
        run: cd k8s && kustomize build | kubectl apply -f -

      - name: Cluster details
        run: |
          kubectl get pods -A
          kubectl get svc -A
          kubectl describe pods -A

      - name: Get kubectl services
        working-directory: starter/frontend/k8s
        run: |
          kubectl get services

      - name: Get kubectl svc
        working-directory: starter/frontend/k8s
        run: |
          kubectl get svc

      - name: Get kubectl pod
        working-directory: starter/frontend/k8s
        run: |
          kubectl get pod
